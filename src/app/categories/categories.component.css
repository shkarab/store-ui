body{
background:black;
}

.gallery {
  display: flex;
  flex-wrap:wrap;
justify-content:flex-start;
/*flex-direction:column; column,row,row-reverse,column-reverse direction*/
/*justify-content:space-between,space-around,flex-start,flex-end,center horizontally*/
/*align-items:baseline,strech,flex-start,flex-end,center verticaly*/
/*Notice that when the flex direction is a column, justify-content changes to the vertical and align-items to the horizontal.*/
/*Notice that when you set the direction to a reversed row or column, start and end are also reversed.*/
/*Another property you can apply to individual items is align-self. This property accepts the same values as align-items and its value for the specific item.*/
/*Sometimes reversing the row or column order of a container is not enough. In these cases, we can apply the order property to individual items. By default, items have a value of 0, but we can use this property to set it to a positive or negative integer value.*/
/*Oh no! The frogs are all squeezed onto a single row of lilypads. Spread them out using the flex-wrap property, which accepts the following values:

nowrap: Every item is fit to a single line.
wrap: Items wrap around to additional lines.
wrap-reverse: Items wrap around to additional lines in reverse*/
/*The two properties flex-direction and flex-wrap are used so often together that the shorthand property flex-flow was created to combine them. This shorthand property accepts the value of one of the two properties separated by a space.

For example, you can use flex-flow: row wrap to set rows and wrap them.*/
/*The frogs are spread all over the pond, but the lilypads are bunched at the top. You can use align-content to set how multiple lines are spaced apart from each other. This property takes the following values:

flex-start: Lines are packed at the top of the container.
flex-end: Lines are packed at the bottom of the container.
center: Lines are packed at the vertical center of the container.
space-between: Lines display with equal spacing between them.
space-around: Lines display with equal spacing around them.
stretch: Lines are stretched to fit the container.*/
}
.img{
   border-radius: 8px;
   width:100%;
   height:150px;
}

.desc{
    text-align:center;
    color:#dddddd;
}

.image-content{
    border:1px #dddddd solid;
     padding:6px;
     width:152px;
     
  
}
.image-box{
    padding:10px;
}
.image-content:hover{
    background-color:#dad5d5;
    box-shadow: 0 0 2px 1px rgba
    (0, 140, 186, 0.5);
     color:#333333;
     
}
.pagination{
    display: block;
}

.clearfix:after {
    content: "";
    display: table;
    clear: both;
}


.dialog {
    background-color: black;
border:1px #dddddd solid;
  display: flex;
  flex-wrap:wrap;
justify-content:center;
width:400px;

}
.dialog-img{
   border-radius: 8px;
   width:100%;
   height:300px;
}
.dialog-desc{
    text-align:center;
    color:#dddddd;
    padding:10px;
}
.dialog-buttons{
 display: flex;
  flex-wrap:wrap;
 
justify-content:center;
}
/*.dialog-button{
    padding: 10px;
}*/
@media only screen and (max-width: 700px){ 
  
 
}
@media screen and (max-width: 500px) {
   
 .pagination{
  display: none;
}
.image-content{
 
   width:97%;
}
.dialog {
   
width:100%;

}
}

.sh-menu-horizental{
    display:flex;
    justify-content: flex-start;
}